name: gocv
"on":
  push:
    paths:
    - .github/workflows/zz-gocv.yml
    - build/gocv/Dockerfile.gocv
    - build/gocv/.version
    - build/gocv/Makefile
jobs:
  gocv:
    strategy:
      matrix:
        arch:
        - amd64
        - arm64
    runs-on: ${{ matrix.arch != 'amd64' && fromJSON(format('["self-hosted","linux","{0}"]', matrix.arch)) || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: build/gocv
    outputs:
      image: ${{ steps.prepare.outputs.image }}
    steps:
    - uses: actions/checkout@v2
    - uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host
    - uses: docker/login-action@v1
      name: Login docker.io
      with:
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
    - id: prepare
      name: Prepare
      env:
        GITHUB_REF: ${{ github.sha }}
        GITHUB_SHA: ${{ github.ref }}
        NAME: gocv
      run: |-
        echo ::set-output name=image_suffix::-${{ matrix.arch }}
        echo ::set-output name=target_platforms::linux/${{ matrix.arch }}

        if [[ ${GITHUB_REF} != "refs/heads/master" ]]; then
          export TAG=sha-${GITHUB_SHA::7}
        fi

        make prepare
    - uses: docker/build-push-action@v2
      name: Build & May Push
      with:
        build-args: ${{ steps.prepare.outputs.build_args }}
        context: build/gocv
        file: build/gocv/Dockerfile.gocv
        labels: |-
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        platforms: ${{ steps.prepare.outputs.target_platforms }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: docker.io/querycap/${{ steps.prepare.outputs.image }}${{ steps.prepare.outputs.image_suffix }}
  gocv-combine:
    if: ${{ github.event_name != 'pull_request' }}
    needs:
    - gocv
    runs-on: ubuntu-latest
    steps:
    - uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host
    - uses: docker/login-action@v1
      name: Login docker.io
      with:
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
    - name: Combine
      env:
        HUB: docker.io/querycap
        IMAGE: ${{ needs.gocv.outputs.image }}
        TARGET_ARCH: amd64 arm64
      run: |-
        for h in ${HUB}; do
          SOURCES=""
          for arch in ${TARGET_ARCH}; do
            SOURCES="${SOURCES} ${h}/${IMAGE}-${arch}"
          done

          docker buildx imagetools create -t ${h}/${IMAGE} ${SOURCES};
          docker buildx imagetools inspect ${h}/${IMAGE};
        done
